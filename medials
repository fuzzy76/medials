#!/usr/bin/php
<?php

/*
medials
List media files in a directory with media properties
HÃ¥vard Pedersen (fuzzy76)
*/

$folder = isset($argv[1]) ? $argv[1] : '.';
$mf = new MediaFolder($folder);
$mf->process();

/**
 * Class MediaBase
 * Base class for all objects
 */
abstract class MediaBase {
  /**
   * Generic __toString()
   * @return string
   */
  function __toString() {
    return print_r($this, TRUE);
  }
}

/**
 * Class MediaFolder
 * Handles a class of mediafiles
 */
class MediaFolder extends MediaBase {
  /**
   * @var array Full path to all files within
   */
  public $found = array();

  /**
   * @param $name string Folder path
   */
  function __construct($name) {
    if ($handle = opendir($name)) {
      while (false !== ($entry = readdir($handle))) {
        $fullname = $name . DIRECTORY_SEPARATOR . $entry;
        if (substr($entry,0,1) != '.' && (is_file($fullname))) { // Only process visible files
          $this->found[] = $fullname;
        }
      }
      closedir($handle);
      sort($this->found);
    } else {
      echo "ERROR: Could not open directory!\n";
    }
  }

  /**
   * Process folder, listing all contents
   */
  function process() {
    foreach ($this->found as $file) {
      $mfile = new MediaFile($file);
      echo $mfile->singleLine();
    }
  }

}


/**
 * Class MediaFile
 * Handles a single media file
 */
class MediaFile extends MediaBase {
  /**
   * @var mixed decoded data from ffprobe
   */
  public $fileinfo = '';
  /**
   * @var string filename
   */
  public $filename;
  /**
   * @var array array of stream objects
   */
  public $streams = array();

  /**
   * @param string $filename analyze a media file
   */
  function __construct($filename) {
    $run = "ffprobe -v quiet -print_format json -show_format -show_streams -show_error -select_streams u '$filename'";
    $fileinfo = shell_exec($run);
    $fileinfo = json_decode($fileinfo);
    $this->filename = basename($filename);
    $this->fileinfo = $fileinfo;
    if (count($fileinfo->streams)) {
      foreach($fileinfo->streams as $stream) {
        $newstream = new MediaStream($stream);
        $this->streams[] = $newstream;

      }
    }
  }

  /**
   * Output a one-line representation of this file
   * @return string
   */
  function singleLine() {
    $vstreams = MediaFile::formatStreams($this->getStreams('video'));
    $astreams = MediaFile::formatStreams($this->getStreams('audio'));
    return sprintf("%-60.60s %10.10s %10.10s %20.20s %20.20s",$this->filename, $this->guessType(), $this->getContainer(), $vstreams, $astreams) . "\n";
  }

  /**
   * Get container format of file
   * @return mixed
   */
  function getContainer() {
    return $this->fileinfo->format->format_name;
  }

  /**
   * Get the streams of a given type
   * @param string|null $filter the streamtype to filter by
   * @return array Array of stream objects
   */
  function getStreams($filter) {
    if (!count($this->streams)) {
      return array();
    }
    $out = array();
    foreach($this->streams as $stream) {
      if ($stream->getType() == $filter) {
        $out[] = $stream;
      }
    }
    return $out;
  }

  /**
   * Count streams of a given type
   * @param string|null $filter the streamtype to filter by
   * @return int number of matching streams
   */
  function countStreams($filter) {
    if (!count($this->streams)) {
      return 0;
    }
    $out = 0;
    foreach($this->streams as $stream) {
      if ($stream->getType() == $filter) {
        $out++;
      }
    }
    return $out;
  }

  /**
   * Guess the mediatype in this file
   * @return string a type of 'video', 'audio', 'picture' or 'other'
   */
  function guessType() {
    $container2type = array(
      'image2' => 'picture',
    );

    $container = $this->getContainer();
    if (isset($container2type[$container])) {
      return $container2type[$container];
    }

    if ($this->countStreams('video'))
      return 'video';

    if ($this->countStreams('audio'))
      return 'audio';

    return 'other';

  }

  /**
   * Return a printable representation of an array of stream objects
   * @param array $streams
   * @return string
   */
  static function formatStreams($streams) {
    $out = array();
    if (count($streams)) {
      foreach ($streams as $stream) {
        $bitrate = $stream->getBitrateFormatted();
        $out[] = $stream->getCodec() . ($bitrate ? "($bitrate)" : '');
      }
    }
    $out = implode(',', $out);
    return $out;
  }

}

/**
 * Class MediaStream
 * A class representing a single media stream
 */
class MediaStream extends MediaBase {
  /**
   * @var array Stream data
   */
  public $streamdata = NULL;

  /**
   * Create object based on stream info
   * @param $stream
   */
  function __construct($stream) {
    $this->streamdata = $stream;
  }

  /**
   * Get type of stream
   * @return string
   */
  function getType() {
    $codec = $this->getCodec();
    $codec2type = array(
      'image2' => 'picture',
    );
    if (isset($codec2type[$codec])) {
      return $codec2type[$codec];
    }
    return $this->streamdata->codec_type;
  }

  /**
   * Get text formatted bitrate
   * @return string|null
   */
  function getBitrateFormatted() {
    $number = $this->getBitrate();
    if (!$number)
      return NULL;
    $sz = 'BKMGTP';
    $factor = floor((strlen($number) - 1) / 3);
    $out = round($number / pow(1024, $factor), 1);
    $letter = ($factor ? @$sz[$factor] : ''); // Skip first letter
    if ($out == 0)
      echo $this;
    return "{$out} {$letter}b";
  }

  /**
   * Get bitrate
   * @return int|null
   */
  function getBitrate() {
    if (isset($this->streamdata->bit_rate))
      return $this->streamdata->bit_rate;
    if (isset($this->streamdata->max_bit_rate))
      return $this->streamdata->max_bit_rate;
    return NULL;
  }

  /**
   * Get codec of stream
   * @return string
   */
  function getCodec() {
    return $this->streamdata->codec_name;
  }

}
